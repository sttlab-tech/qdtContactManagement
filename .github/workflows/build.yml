name: Build and push the image

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Container Registry
      run: |
        echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.REGISTRY_URL }} -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
      env:
        REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build microservice Image
      run: |
        docker build -t ${{ secrets.REGISTRY_URL }}/msr-contact-management:${{ vars.MAJOR_VERSION }}.${{ vars.MINOR_VERSION }}.${{ github.run_number }} --build-arg REGISTRY_URL=${{ secrets.REGISTRY_URL }} .

    - name: Push microservice Image
      run: |
        docker push ${{ secrets.REGISTRY_URL }}/msr-contact-management:${{ vars.MAJOR_VERSION }}.${{ vars.MINOR_VERSION }}.${{ github.run_number }}

  integration-tests:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10-dind
        options: --privileged
    needs: build-and-push

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Build .env
      run: |
        echo "MSR_IMAGE=${{ secrets.REGISTRY_URL }}/msr-contact-management:${{ vars.MAJOR_VERSION }}.${{ vars.MINOR_VERSION }}.${{ github.run_number }}" > ./resources/docker-compose/.env
        echo "DB_SERVER_NAME=${{ secrets.DB_SERVER_NAME }}" >> ./resources/docker-compose/.env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> ./resources/docker-compose/.env
        echo "DB_DATABASE_NAME=${{ secrets.DB_DATABASE_NAME }}" >> ./resources/docker-compose/.env
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> ./resources/docker-compose/.env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./resources/docker-compose/.env
        cat ./resources/docker-compose/.env
      env:
        DB_SERVER_NAME: ${{ secrets.DB_SERVER_NAME }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_DATABASE_NAME: ${{ secrets.DB_DATABASE_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    - name: Docker login
      run: |
        echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
      env:
        REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Create docker compose stack
      run: |
        cd ./resources/docker-compose
        docker compose up -d

    - name: Wait for MSR to be ready
      run: |
        url="http://localhost:15555"
        max_wait=120
        elapsed_time=0
        interval=5

        while true; do
            echo "Checking MSR..."
            http_status=$(curl -o /dev/null -s -w "%{http_code}\n" $url)
            echo "HTTP status: $http_status"

            if [ "$http_status" -eq 200 ]; then
                exit 0
            else
                echo "MSR not ready, trying again in $interval seconds..."
            fi

            sleep $interval
            ((elapsed_time+=interval))

            if [ "$elapsed_time" -ge "$max_wait" ]; then
                echo "Error. MSR not ready after $max_wait seconds."
                exit 1
            fi
        done